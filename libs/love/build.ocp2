
ocaml = {
  asmcomp = [];
  bytecomp = [];
  ocamlc_deps = [];
  ocamlopt_deps = [];
  requires = [];
};

function parse_mod(mod) {
  if (value_type(mod) = "string") {
    return { modname = mod; filename = mod; open = true; dep = true; };
  } else {
    if (value_type(mod) = "tuple" && value_length(mod) = 2 &&
        value_type(mod[0]) = "string" && value_type(mod[1]) = "object") {
      res = { modname = mod[0]; filename = mod[0]; open = true; dep = true; };
      try { res.filename = mod[1].filename; } catch("unknown-field",f) { }
      try { res.open = mod[1].open; } catch("unknown-field",f) { }
      try { res.dep = mod[1].dep; } catch("unknown-field",f) { }
      return res;
    } else { (* error *) }
  }
}

function with_libs(ocaml, libmods_list) {
  make_comp = function(libmods) {
    opens = List_flatten (List_map (function(mod) {
      m = parse_mod(mod);
      if (m.open) { return [ "-open"; m.modname ]; }
      else { return []; }
    }, libmods[1]));
    if (opens = []) { return []; }
    else { return ["-I"; "%{" + libmods[0] + "_FULL_DST_DIR}%/"; ] + opens; }
  };

  make_deps = function(libmods, ext) {
    return List_flatten (List_map (function(mod) {
      m = parse_mod(mod);
      if (m.dep) {
        return "%{" + libmods[0] + "_FULL_DST_DIR}%/" + m.filename + "." + ext;
      } else { return ""; }
    }, libmods[1]));
  };

  ocaml.asmcomp += List_flatten (List_map (make_comp, libmods_list));

  ocaml.bytecomp += List_flatten (List_map (make_comp, libmods_list));

  ocaml.ocamlc_deps += List_flatten (List_map (function(libmods) {
      return make_deps(libmods, "cmo"); }, libmods_list));

  ocaml.ocamlopt_deps += List_flatten (List_map (function(libmods) {
      return make_deps(libmods, "cmx"); }, libmods_list));

  ocaml.requires += List_map (function(libmods) {
      return libmods[0]; }, libmods_list);

  return ocaml;

}


current_proto = "proto_005_PsBabyM1";

dune_network_dir = "../../dune-network/";

warnings = "-3+5+8+10..12+14+20+21+23+24+26+28-30+34..39+50+52+56+59";

compflags = [ "-no-alias-deps"; "-w"; warnings; "-warn-error"; warnings ];

ocaml.asmcomp += compflags;
ocaml.bytecomp += compflags;

function from_dune_vendors(file) {
  return dune_network_dir + "vendors/" + file;
}

function from_dune_src(file) {
  return dune_network_dir + "src/" + file;
}

function from_dune_proto(file) {
  return dune_network_dir + "src/" + current_proto + "/" + file;
}

OCaml.library("ocplib-external-callback",
  ocaml + {
    bytelink = [ "-custom" ];
    files = [
      from_dune_vendors("ocplib-external-callback/callback.c");
      from_dune_vendors("ocplib-external-callback/externalCallback.ml");
    ];
    requires = [ "cstruct" ];
  });



OCaml.library("ocaml-blake2",
  ocaml + {
    bytelink = [ "-custom" ];
    cflags = [ "-DHAVE___INT128"; "-DUSE_ASM_X86_64";
               "-DUSE_SCALAR_4X64"; "-DUSE_FIELD_5X52";
               "-DUSE_NUM_GMP";
               "-DUSE_SCALAR_INV_NUM";
               "-DUSE_FIELD_INV_NUM";
               "-DUSE_SECP256K1_INLINE=inline";
               "-DUSE_SECP256K1_RESTRICT=restrict";
               "-DUSE_SECP256K1_TAG_PUBKEY_EVEN=0x02";
               "-DUSE_SECP256K1_TAG_PUBKEY_ODD=0x03";
               "-DUSE_SECP256K1_TAG_PUBKEY_UNCOMPRESSED=0x04";
               "-DUSE_SECP256K1_TAG_PUBKEY_HYBRID_EVEN=0x06";
               "-DUSE_SECP256K1_TAG_PUBKEY_HYBRID_ODD=0x07";
               "-DENABLE_MODULE_RECOVERY"; ];
    files = [
      from_dune_vendors("ocaml-blake2/src/blake2b-ref.c");
      from_dune_vendors("ocaml-blake2/src/blake2.mli");
      from_dune_vendors("ocaml-blake2/src/blake2.ml");
    ];
    requires = [ "bigstring" ];
  });



OCaml.library("ocaml-secp256k1",
  ocaml + {
    bytelink = [ "-custom" ];
    cflags = [ "-DHAVE___INT128"; "-DUSE_ASM_X86_64";
               "-DUSE_SCALAR_4X64"; "-DUSE_FIELD_5X52";
               "-DUSE_NUM_GMP";
               "-DUSE_SCALAR_INV_NUM";
               "-DUSE_FIELD_INV_NUM";
               "-DUSE_SECP256K1_INLINE=inline";
               "-DUSE_SECP256K1_RESTRICT=restrict";
               "-DUSE_SECP256K1_TAG_PUBKEY_EVEN=0x02";
               "-DUSE_SECP256K1_TAG_PUBKEY_ODD=0x03";
               "-DUSE_SECP256K1_TAG_PUBKEY_UNCOMPRESSED=0x04";
               "-DUSE_SECP256K1_TAG_PUBKEY_HYBRID_EVEN=0x06";
               "-DUSE_SECP256K1_TAG_PUBKEY_HYBRID_ODD=0x07";
               "-DENABLE_MODULE_RECOVERY"; ];
    files = [
      from_dune_vendors("ocaml-secp256k1/src/secp256k1.c");
      from_dune_vendors("ocaml-secp256k1/src/secp256k1_wrap.c");
    ] + OCaml.pack("Libsecp256k1", [
      from_dune_vendors("ocaml-secp256k1/src/internal.ml");
      from_dune_vendors("ocaml-secp256k1/src/external.ml");
    ]);
    requires = [ "cstruct"; "bigstring" ];
  });



OCaml.library("ocaml-lmdb",
  ocaml + {
    files = [
      from_dune_vendors("ocaml-lmdb/src/mdb.c");
      from_dune_vendors("ocaml-lmdb/src/midl.c");
      from_dune_vendors("ocaml-lmdb/src/lmdb_stubs.c");
      from_dune_vendors("ocaml-lmdb/src/lmdb.mli");
      from_dune_vendors("ocaml-lmdb/src/lmdb.ml");
    ];
    requires = [ "cstruct"; "rresult" ];
  });



OCaml.library("ocplib-mapfile",
  ocaml + {
    files = [
      from_dune_vendors("ocplib-mapfile/mapfile_stubs.c");
    ] + OCaml.pack("Ocplib_mapfile", [
      from_dune_vendors("ocplib-mapfile/mapfile.ml")
    ]);
    requires = [ "cstruct"; "bigstring"; "rresult" ];
  });



OCaml.library("ocplib-ironmin",
  ocaml + {
    files = OCaml.pack("Ocplib_ironmin", [
      from_dune_vendors("ocplib-ironmin/fifoCache.ml");
      from_dune_vendors("ocplib-ironmin/uintvar.ml");
      from_dune_vendors("ocplib-ironmin/ironmin.ml");
      from_dune_vendors("ocplib-ironmin/ironmin_lmdb.ml");
    ]);
    requires = [ "bigstring"; "lwt"; "hex"; "ocplib-endian";
                 "ocplib-endian.bigstring"; "ocplib-mapfile"; "ocaml-lmdb" ];
  });



OCaml.library("ocplib-resto",
  ocaml + {
    files = [
      from_dune_vendors("ocplib-resto/lib_resto/resto.mli");
      from_dune_vendors("ocplib-resto/lib_resto/resto.ml");
      from_dune_vendors("ocplib-resto/lib_resto-directory/resto_directory.mli");
      from_dune_vendors("ocplib-resto/lib_resto-directory/resto_directory.ml");
    ];
    requires = [ "lwt"; "uri" ];
  });



OCaml.library("dune-stdlib",
  ocaml + {
    files = OCaml.pack("Tezos_stdlib", [
      from_dune_src("lib_stdlib/compare.ml");
      from_dune_src("lib_stdlib/option.ml");
      from_dune_src("lib_stdlib/mBytes.ml");
      from_dune_src("lib_stdlib/tzList.ml");
      from_dune_src("lib_stdlib/tzString.ml");
      from_dune_src("lib_stdlib/utils.ml");
      from_dune_src("lib_stdlib/binary_stream.ml");
      from_dune_src("lib_stdlib/tag.ml");
      from_dune_src("lib_stdlib/lwt_utils.ml");
      from_dune_src("lib_stdlib/lwt_canceler.ml");
      from_dune_src("lib_stdlib/ring.ml");
      from_dune_src("lib_stdlib/weakRingTable.ml");
      from_dune_src("lib_stdlib/environment_variable.ml");
      from_dune_src("lib_stdlib/dune_debug.ml");
    ]);
    requires = [ "zarith"; "lwt"; "re"; "hex";
                 "bigstring"; "ocplib-endian.bigstring" ];
  });



OCaml.library("dune-data-encoding",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_data_encoding", [
      from_dune_src("lib_data_encoding/binary_size.ml");
      from_dune_src("lib_data_encoding/encoding.ml");
      from_dune_src("lib_data_encoding/binary_error.ml");
      from_dune_src("lib_data_encoding/binary_length.ml");
      from_dune_src("lib_data_encoding/binary_reader.ml");
      from_dune_src("lib_data_encoding/binary_writer.ml");
      from_dune_src("lib_data_encoding/binary_stream_reader.ml");
      from_dune_src("lib_data_encoding/json.ml");
      from_dune_src("lib_data_encoding/bson.ml");
      from_dune_src("lib_data_encoding/binary_schema.ml");
      from_dune_src("lib_data_encoding/binary_description.ml");
      from_dune_src("lib_data_encoding/data_encoding.ml");
   ]);
   requires = [ "ocplib-ironmin"; "ocplib-json-typed";
                "ocplib-json-typed-bson"; "ezjsonm"; "uutf" ];
  }, [ "dune-stdlib", [ "Tezos_stdlib" ] ]));



OCaml.library("dune-config",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_config", [
      from_dune_src("lib_config/source_config.ml");
      from_dune_src("lib_config/env_config.ml");
      from_dune_src("lib_config/cst_config.ml");
      from_dune_src("lib_config/set_config_mainnet.ml");
      from_dune_src("lib_config/set_config_testnet.ml");
      from_dune_src("lib_config/set_config_private.ml");
      from_dune_src("lib_config/set_config.ml");
      from_dune_src("lib_config/config_type.ml");
      from_dune_src("lib_config/config_network.ml");
      from_dune_src("lib_config/config.ml");
    ]);
    requires = [ "ocplib-external-callback" ];
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-data-encoding", [ "Tezos_data_encoding" ] ]));



OCaml.library("dune-error-monad",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_error_monad", [
      from_dune_src("lib_error_monad/error_monad_sig.ml");
      from_dune_src("lib_error_monad/error_monad.ml");
      from_dune_src("lib_error_monad/error_table.ml");
    ]);
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-data-encoding", [ "Tezos_data_encoding" ] ]));



OCaml.library("dune-clic",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_clic", [
      from_dune_src("lib_clic/clic.ml");
    ]);
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-error-monad", [ "Tezos_error_monad" ] ]));



OCaml.library("dune-rpc",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_rpc", [
      from_dune_src("lib_rpc/RPC_arg.ml");
      from_dune_src("lib_rpc/RPC_encoding.ml");
      from_dune_src("lib_rpc/RPC_path.ml");
      from_dune_src("lib_rpc/RPC_query.ml");
      from_dune_src("lib_rpc/RPC_answer.ml");
      from_dune_src("lib_rpc/RPC_service.ml");
      from_dune_src("lib_rpc/RPC_directory.ml");
      from_dune_src("lib_rpc/RPC_context.ml");
    ]);
    requires = [ "ocplib-resto" ];
  }, [ "dune-data-encoding", [ "Tezos_data_encoding" ];
       "dune-error-monad", [ "Tezos_error_monad" ] ]));



OCaml.library("dune-crypto",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_crypto", [
      from_dune_src("lib_crypto/base58.ml");
      from_dune_src("lib_crypto/s.ml"); (* do not change order *)
      from_dune_src("lib_crypto/helpers.ml");
      from_dune_src("lib_crypto/rand.ml");
      from_dune_src("lib_crypto/blake2B.ml");
      from_dune_src("lib_crypto/ed25519.ml");
      from_dune_src("lib_crypto/secp256k1.ml");
      from_dune_src("lib_crypto/p256.ml");
      from_dune_src("lib_crypto/operation_hash.ml");
      from_dune_src("lib_crypto/operation_list_hash.ml");
      from_dune_src("lib_crypto/operation_list_list_hash.ml");
      from_dune_src("lib_crypto/block_hash.ml");
      from_dune_src("lib_crypto/protocol_hash.ml");
      from_dune_src("lib_crypto/chain_id.ml");
      from_dune_src("lib_crypto/context_hash.ml");
      from_dune_src("lib_crypto/signature.ml");
      from_dune_src("lib_crypto/crypto_box.ml");
    ]);
    requires = [ "hacl"; "uecc"; "ocaml-secp256k1"; "dune-network-deps" ];
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-data-encoding", [ "Tezos_data_encoding" ];
       "dune-error-monad", [ "Tezos_error_monad" ];
       "dune-rpc", [ "Tezos_rpc" ];
       "dune-clic", [ "Tezos_clic" ];
       "dune-config", [ "Tezos_config", { open = false } ]]));



OCaml.library("dune-micheline",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_micheline", [
      from_dune_src("lib_micheline/micheline.ml");
      from_dune_src("lib_micheline/micheline_parser.ml");
      from_dune_src("lib_micheline/micheline_printer.ml");
    ]);
    requires = [ ];
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-data-encoding", [ "Tezos_data_encoding" ];
       "dune-error-monad", [ "Tezos_error_monad" ] ]));



OCaml.library("dune-base",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_base", [
      from_dune_src("lib_base/s.ml");
      from_dune_src("lib_base/time.ml");
      "fitness.ml", { pp = [ "ocp-pp" ] };
      "block_header.ml", { pp = [ "ocp-pp" ] };
      "operation.ml", { pp = [ "ocp-pp" ] };
      "protocol.ml", { pp = [ "ocp-pp" ] };
      from_dune_src("lib_base/test_chain_status.ml");
      from_dune_src("lib_base/preapply_result.ml");
      from_dune_src("lib_event_logging/internal_event.ml");
      from_dune_src("lib_base/p2p_version.ml");
      from_dune_src("lib_base/distributed_db_version.ml");
      from_dune_src("lib_base/network_version.ml");
      from_dune_src("lib_base/p2p_peer_id.ml");
      from_dune_src("lib_base/p2p_identity.ml");
      from_dune_src("lib_base/p2p_point.ml");
      from_dune_src("lib_base/p2p_addr.ml");
      from_dune_src("lib_base/p2p_connection.ml");
      from_dune_src("lib_base/p2p_stat.ml");
      from_dune_src("lib_base/p2p_peer.ml");
      from_dune_src("lib_base/mempool.ml");
      from_dune_src("lib_base/lwt_exit.ml");
      from_dune_src("lib_base/tzPervasives.ml");
    ]);
    requires = [ "ptime"; "lwt_log"; "ipaddr" ];
  }, [ "dune-stdlib", [ "Tezos_stdlib" ];
       "dune-crypto", [ "Tezos_crypto" ];
       "dune-data-encoding", [ "Tezos_data_encoding" ];
       "dune-error-monad", [ "Tezos_error_monad" ];
       "dune-rpc", [ "Tezos_rpc" ];
       "dune-clic", [ "Tezos_clic" ];
       "dune-micheline", [ ] ]));



OCaml.library("dune-env",
  with_libs(ocaml + {
    files = [
       "tezos_protocol_environment.ml";
       "environment.ml"
     ];
    requires = [ ];
  }, [ "dune-base", [ "Tezos_base";
                      "TzPervasives", { dep = false } ];
       "dune-micheline", [ "Tezos_micheline" ] ]));



OCaml.library("dune-proto",
  with_libs(ocaml + {
    files = OCaml.pack("Tezos_protocol",
      OCaml.pack("Protocol", [

      from_dune_proto("lib_protocol/config.ml");

      from_dune_proto("lib_protocol/dune_misc.ml");
      from_dune_proto("lib_protocol/misc.ml");
      from_dune_proto("lib_protocol/storage_description.ml");
      from_dune_proto("lib_protocol/state_hash.ml");
      from_dune_proto("lib_protocol/nonce_hash.ml");
      "script_expr_hash.ml", { pp = [ "ocp-pp" ] };
      from_dune_proto("lib_protocol/contract_hash.ml");
      from_dune_proto("lib_protocol/blinded_public_key_hash.ml");

      from_dune_proto("lib_protocol/qty_repr.ml");
      from_dune_proto("lib_protocol/tez_repr.ml");
      from_dune_proto("lib_protocol/period_repr.ml");
      from_dune_proto("lib_protocol/time_repr.ml");
      from_dune_proto("lib_protocol/constants_repr.ml");
      from_dune_proto("lib_protocol/fitness_repr.ml");
      from_dune_proto("lib_protocol/raw_level_repr.ml");
      from_dune_proto("lib_protocol/voting_period_repr.ml");
      from_dune_proto("lib_protocol/cycle_repr.ml");
      from_dune_proto("lib_protocol/level_repr.ml");
      from_dune_proto("lib_protocol/seed_repr.ml");
      from_dune_proto("lib_protocol/gas_limit_repr.ml");
      from_dune_proto("lib_protocol/script_int_repr.ml");
      from_dune_proto("lib_protocol/script_timestamp_repr.ml");
      from_dune_proto("lib_protocol/michelson_v1_primitives.ml");
      from_dune_proto("lib_protocol/script_repr.ml");
      "contract_repr.ml", { pp = [ "ocp-pp" ] };
      from_dune_proto("lib_protocol/roll_repr.ml");
      from_dune_proto("lib_protocol/vote_repr.ml");
      from_dune_proto("lib_protocol/block_header_repr.ml");

      from_dune_proto("lib_protocol/dune_script_sig.ml");
      from_dune_proto("lib_protocol/lang1_script_repr.ml");
      from_dune_proto("lib_protocol/dune_script_registration.ml");
      from_dune_proto("lib_protocol/lang1_repr.ml");

      from_dune_proto("lib_protocol/love_pervasives.ml");
      from_dune_proto("lib_protocol/love_type.ml");
      from_dune_proto("lib_protocol/love_type_list.ml");
      from_dune_proto("lib_protocol/love_primitive.ml");
      from_dune_proto("lib_protocol/love_ast.ml");
      from_dune_proto("lib_protocol/love_runtime_ast.ml");
      from_dune_proto("lib_protocol/love_value.ml");
      from_dune_proto("lib_protocol/love_printer.ml");
      from_dune_proto("lib_protocol/love_encoding_sig.ml");
      from_dune_proto("lib_protocol/love_json_encoding.ml");
      from_dune_proto("lib_protocol/love_binary_size.ml");
      from_dune_proto("lib_protocol/love_binary_buffer.ml");
      from_dune_proto("lib_protocol/love_binary_encoding.ml");
      from_dune_proto("lib_protocol/love_encoding.ml");
      from_dune_proto("lib_protocol/love_size.ml");
      from_dune_proto("lib_protocol/love_script_repr.ml");
      from_dune_proto("lib_protocol/love_repr.ml");

      from_dune_proto("lib_protocol/dune_script_repr.ml");
      from_dune_proto("lib_protocol/commitment_repr.ml");
      from_dune_proto("lib_protocol/dune_parameters_repr.ml");
      from_dune_proto("lib_protocol/dune_operation_repr.ml");
      from_dune_proto("lib_protocol/dune_lang_repr.ml");
      from_dune_proto("lib_protocol/legacy_script_support_repr.ml");

      from_dune_proto("lib_protocol/operation_repr.ml");
      from_dune_proto("lib_protocol/manager_repr.ml");
      from_dune_proto("lib_protocol/parameters_repr.ml");

      "raw_context.ml", { pp = [ "ocp-pp" ] };
      from_dune_proto("lib_protocol/storage_sigs.ml");
      from_dune_proto("lib_protocol/storage_functors.ml");
      from_dune_proto("lib_protocol/storage.ml");
      from_dune_proto("lib_protocol/dune_storage.ml"), {
          nodeps = [ "Protocol" ]; noimpldeps = [ "Protocol" ] };

      from_dune_proto("lib_protocol/constants_storage.ml");
      from_dune_proto("lib_protocol/level_storage.ml");
      from_dune_proto("lib_protocol/nonce_storage.ml");
      from_dune_proto("lib_protocol/seed_storage.ml");
      from_dune_proto("lib_protocol/roll_storage.ml");
      from_dune_proto("lib_protocol/delegate_storage.ml");
      from_dune_proto("lib_protocol/contract_storage.ml");
      from_dune_proto("lib_protocol/bootstrap_storage.ml");
      from_dune_proto("lib_protocol/fitness_storage.ml");
      from_dune_proto("lib_protocol/vote_storage.ml");
      from_dune_proto("lib_protocol/commitment_storage.ml");
      from_dune_proto("lib_protocol/dune_actions.ml");
      from_dune_proto("lib_protocol/init_storage.ml");
      from_dune_proto("lib_protocol/fees_storage.ml");

      "alpha_context.ml", { pp = [ "ocp-pp" ] };

      from_dune_proto("lib_protocol/script_typed_ir.ml");
      from_dune_proto("lib_protocol/script_tc_errors.ml");
      from_dune_proto("lib_protocol/michelson_v1_gas.ml");
      from_dune_proto("lib_protocol/script_ir_annot.ml");
      from_dune_proto("lib_protocol/script_ir_translator.ml");
      from_dune_proto("lib_protocol/script_interpreter.ml");

      from_dune_proto("lib_protocol/dune_apply_results.ml");
      from_dune_proto("lib_protocol/apply_results.ml");
      from_dune_proto("lib_protocol/dune_script_interpreter_sig.ml");
      from_dune_proto("lib_protocol/dune_script_interpreter_registration.ml");

      from_dune_proto("lib_protocol/love_ast_utils.ml");
      from_dune_proto("lib_protocol/love_gas.ml");
      from_dune_proto("lib_protocol/love_context.ml");
      from_dune_proto("lib_protocol/love_tenv.ml");
      from_dune_proto("lib_protocol/love_typechecker.ml");
     ]));
    requires = [ "ocplib-external-callback" ];
  }, [ "dune-env", [ "Environment", { filename = "environment" };
                     "Error_monad", { dep = false } ] ]));



OCaml.library("dune-client",
  with_libs(ocaml + {
    files = OCaml.pack("Client", [
      from_dune_proto("lib_client/love_parser_utils.ml");
      from_dune_proto("lib_client/love_parser.mly"), {
          ocamlyacc = [ "menhir"; "--fixed-exception"; "--strict" ] };
      from_dune_proto("lib_client/love_lexer.mll");
    ]);
    requires = [ ];
  }, [ "dune-env", [ "Environment", { filename = "environment" } ];
       "dune-proto", [ "Tezos_protocol" ]; ]));



OCaml.library("dune-params",
  with_libs(ocaml + {
    files = [
      from_dune_proto("lib_parameters/default_parameters.ml");
    ];
    requires = [ ];
  }, [ "dune-base", [ "Tezos_base";
                      "TzPervasives", { dep = false } ];
       "dune-proto", [ "Tezos_protocol" ] ]));


