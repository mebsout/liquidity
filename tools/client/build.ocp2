
OCaml.library("ocplib-liquidity-client-functor",
   ocaml + {
     files = [
       "lazy_superposed.ml";
       "liquidClientUtils.ml";
       "liquidityLang.ml";
       "liquidClientSigs.ml";
       "liquidClientRequest.ml";
       "liquidClientTypes.ml";
       "liquidClientErrors.ml";
       "liquidClientRPCs.ml";
       "liquidClient.ml";
     ];
     requires = [
       "ocplib-liquidity-options";
       "ocplib-liquidity-base";
       "ocplib-json-typed";
       "dune-network-lib";
       "ezjsonm";
       "curl";
       "curl.lwt";
     ];
   });

if ( with_dune_network ) {

OCaml.library("ocplib-liquidity-to-michelson-client",
   ocaml + {
     files = [
       "michelsonTarget.ml";
     ];
     requires = [
       "ocplib-liquidity-client-functor";
       "ocplib-liquidity-base";
       "ocplib-liquidity-init";
       "ocplib-liquidity-with-dune-network";
     ];
   });

OCaml.library("ocplib-liquidity-to-love-client",
   ocaml + {
     files = [
       "loveTarget.ml";
     ];
     requires = [
       "ocplib-liquidity-client-functor";
       "ocplib-liquidity-base";
       "ocplib-liquidity-init";
       "ocplib-liquidity-with-dune-network";
       "ocplib-liq2love"
     ];
   });

OCaml.program("liquidity-client",
   ocaml + {
     bytelink = ["-cclib"; "-lsodium_stubs -lsodium"];
     files = [
       "../liquidity/liquidCommonArgs.ml";
       "liquidClientMain.ml";
     ];
     requires = [
       "ocplib-liquidity-to-love-client";
       "ocplib-liquidity-to-michelson-client";
       "ocplib-file";
       "ocplib-liquidity-base";
       "ocplib-liquidity-init";
       "ezcmd";
     ];
   });

}
