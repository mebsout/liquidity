(**************************************************************************)
(*                                                                        *)
(*    Copyright (c) 2017       .                                          *)
(*    Fabrice Le Fessant, OCamlPro SAS <fabrice@lefessant.net>            *)
(*                                                                        *)
(*    All rights reserved. No warranty, explicit or implicit, provided.   *)
(*                                                                        *)
(**************************************************************************)

(*
   A contract is compiled as followed:
   1) it is parsed by the OCaml compiler parser (compiler-libs)
   2) the AST is translated to a simple untyped AST in [LiquidOCaml]
   3) the untyped AST is typechecked in [LiquidCheck], number of uses
       for each variable is computed, and a list of one-use variables
       to be inlined is computed
   4) one-use variables are inlined, and their def sites are removed,
      in [LiquidSimplify] (optional pass)
   5) the untyped AST is translated to symbolic Michelson in
      [LiquidMichelson]
   6) symbolic Michelson is simplified, mostly to decrease the size of
      the stack. The pass is mostly optional, except the removal of
      expressions after FAIL.
   7) the symbolic Michelson is translated to raw Michelson in
      [LiquidEmit]
   8) the raw Michelson is finally printed in [LiquidPrinter]

*)

if(with_version){
  version_info = { ocp2ml=true;
                             env_strings = [
                                "ocp::commit";
                                "ocp::dates";
                                ]; };
} else {
  version_info = {};
}

OCaml.library("ocplib-liquidity-base",
   ocaml + {
     files = [

       "iSO8601.ml";

       "liquidOptions.ml";
       "liquidVersion.ml", version_info;
       "liquidMisc.ml";

       "liquidTypes.ml";
       "liquidLoc.ml";

       "liquidBoundVariables.ml";
       "liquidPrinter.ml";
       "liquidDot.ml";

       "liquidEmit.ml";
       "liquidPeephole.ml";
       "liquidInfer.ml";
       "liquidCheck.ml";
       "liquidSimplify.ml";
       "liquidEncode.ml";
       "liquidDecode.ml";
       "liquidMichelson.ml";

       "liquidClean.ml";
       "liquidInterp.ml";
       "liquidUntype.ml";
     ];
     requires = [
       "ocplib-dot";
       "zarith";
     ];

   });


OCaml.library("ocplib-liquidity-ocaml",
   ocaml + {
     files = [
       "ocaml/liquidOCamlParser.mly";
       "ocaml/liquidOCamlLexer.mll";
       "ocaml/liquidOCamlParse.ml";
       "ocaml/liquidOCamlPrinter.ml";

       "liquidFromOCaml.ml";
       "liquidToOCaml.ml";
       "liquidData.ml";
     ];
     requires = [
        "ocplib-liquidity-base";
        "compiler-libs.common";
     ];

   });

if ( with_tezos ) {
OCaml.library("ocplib-liquidity-with-tezos",
   ocaml + {
     files = [
       "with-tezos/liquidTezosTypes.ml";
       "with-tezos/liquidFromTezos.ml";
       "with-tezos/liquidToTezos.ml";
       "liquidDecomp.ml";
     ];
     requires = [
        "ocplib-liquidity-base";
        "ocplib-liquidity-ocaml";
        "michelson";
     ];
   });

OCaml.library("ocplib-liquidity-deploy",
   ocaml + {
     files = [
       "liquidInit.ml";
       "liquidDeploy.ml";
     ];
     requires = [
       "ocplib-liquidity-with-tezos";
       "ocplib-liquidity-ocaml";
       "curl";
       "curl.lwt";
     ];
   });

if (for_javascript) {
OCaml.program("liquidity",
   ocaml + {
     files = [
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-liquidity-deploy";
       "ocplib-file";
     ];
   });
} else {
OCaml.program("liquidity",
   ocaml + {
     bytelink = ["-cclib"; "-lsodium_stubs -lsodium"];
     files = [
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-liquidity-deploy";
       "ocplib-file";
     ];
   });
}
}

OCaml.library("ocplib-liquidity-without-tezos",
   ocaml + {
     files = [
       "without-tezos/liquidTezosTypes.ml";
       "without-tezos/liquidFromTezos.ml";
       "without-tezos/liquidToTezos.ml";
       "liquidDecomp.ml";
     ];
     requires = [
        "ocplib-liquidity-base";
        "ocplib-liquidity-ocaml";
     ];
   });

OCaml.library("ocplib-liquidity-deploy-without-tezos",
   ocaml + {
     files = [
       "without-tezos/liquidDeploy.ml";
     ];
     requires = [
       "ocplib-liquidity-base";
       "ocplib-fake-lwt"
     ];
   });

OCaml.program("liquidity-mini",
   ocaml + {
     files = [
       "liquidInit.ml";
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-liquidity-deploy-without-tezos";
       "ocplib-liquidity-without-tezos";
       "ocplib-liquidity-ocaml";
       "ocplib-file";
     ];

   });
